<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<artifactId>de.rcenvironment.documentation.core</artifactId>
	<name>RCE Documentation (Core)</name>
	<!-- as a preliminary workaround, the POM version is used to transport root 
		version information to the DocBook processor; it should work with normal 
		properties as well, though - misc_ro -->
	<version>6.0.0.qualifier</version>
	<packaging>pom</packaging>

	<parent>
		<groupId>de.rcenvironment</groupId>
		<artifactId>de.rcenvironment.documentation.core.defaultParent</artifactId>
		<version>1.0.0</version>
		<relativePath>../de.rcenvironment.documentation.core/maven/parent</relativePath>
	</parent>

	<build>
		<plugins>
			<!-- render SVG diagrams to PNG; required for embedding in HTML - misc_ro -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>batik-maven-plugin</artifactId>
				<version>1.0-beta-1</version>
				<executions>
					<execution>
						<goals>
							<goal>rasterize</goal>
						</goals>
						<phase>prepare-package</phase>
						<configuration>
							<srcDir>src/docbkx/diagrams/svg</srcDir>
							<destDir>target/docbkx/diagrams/img-gen</destDir>
						</configuration>
					</execution>
				</executions>
				<dependencies>
					<!-- this fixes a dependency conflict; see http://stackoverflow.com/questions/714243/ -->
					<dependency>
						<groupId>batik</groupId>
						<artifactId>batik-transcoder</artifactId>
						<version>1.6-1</version>
						<scope>compile</scope>
						<exclusions>
							<exclusion>
								<artifactId>fop</artifactId>
								<groupId>fop</groupId>
							</exclusion>
						</exclusions>
					</dependency>
				</dependencies>
			</plugin>
			<!-- generate the build qualifier as used for Tycho artifacts -->
			<plugin>
				<groupId>org.eclipse.tycho</groupId>
				<artifactId>tycho-packaging-plugin</artifactId>
				<executions>
					<execution>
						<goals>
							<goal>build-qualifier</goal>
						</goals>
						<phase>prepare-package</phase>
					</execution>
				</executions>
			</plugin>
			<!-- use Ant+JavaScript to customize the displayed build id; needs antrun 
				>=1.7 to export Maven properties -->
			<plugin>
				<artifactId>maven-antrun-plugin</artifactId>
				<version>1.7</version>
				<executions>
					<execution>
						<phase>prepare-package</phase>
						<configuration>
							<exportAntProperties>true</exportAntProperties>
							<target>
								<script language="javascript">
								<![CDATA[
									root = project.getProperty('unqualifiedVersion').replace('qualifier', '');
									qualifier = project.getProperty('buildQualifier');
									project.setProperty('antGenerated.buildId', 'Build ' + root + qualifier);
								]]>
								</script>
								<echo>Generated build id: "${antGenerated.buildId}"</echo>
							</target>
						</configuration>
						<goals>
							<goal>run</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<!-- render src/docbkx/*.xml sources to various formats - misc_ro -->
			<plugin>
				<groupId>com.agilejava.docbkx</groupId>
				<artifactId>docbkx-maven-plugin</artifactId>
				<version>2.0.14</version>
				<dependencies>
					<dependency>
						<groupId>org.docbook</groupId>
						<artifactId>docbook-xml</artifactId>
						<version>4.4</version>
						<scope>runtime</scope>
					</dependency>
				</dependencies>
				<executions>
					<execution>
						<id>generate-docbook-html</id>
						<phase>prepare-package</phase>
						<goals>
							<goal>generate-html</goal>
						</goals>
						<configuration>
							<!-- image files must be manually added to the output - misc_ro -->
							<postProcess>
								<!-- ensure directory exists -->
								<mkdir dir="target/docbkx/diagrams/img-gen" />
								<copy todir="target/docbkx/html/images" flatten="true">
									<fileset dir="src/docbkx/" includes="**/images/*" />
									<fileset dir="target/docbkx/diagrams/img-gen" />
								</copy>
							</postProcess>
						</configuration>
					</execution>
					<execution>
						<id>generate-docbook-pdf-windows</id>
						<phase>prepare-package</phase>
						<goals>
							<goal>generate-pdf</goal>
						</goals>
						<configuration>
							<!-- reuse the images assembled for HTML for PDF generation - misc_ro -->
							<imgSrcPath>file:///${basedir}/target/docbkx/html/</imgSrcPath>
							<!-- required so docbook parts in sub-folders can reference images 
								consistently - misc_ro -->
							<keepRelativeImageUris>true</keepRelativeImageUris>
							<paperType>A4</paperType>
							<profileOs>windows</profileOs>
							<targetDirectory>${basedir}/target/docbkx/pdf/windows</targetDirectory>
						</configuration>
					</execution>
					<execution>
						<id>generate-docbook-pdf-linux</id>
						<phase>prepare-package</phase>
						<goals>
							<goal>generate-pdf</goal>
						</goals>
						<configuration>
							<!-- reuse the images assembled for HTML for PDF generation - misc_ro -->
							<imgSrcPath>file:///${basedir}/target/docbkx/html/</imgSrcPath>
							<!-- required so docbook parts in sub-folders can reference images 
								consistently - misc_ro -->
							<keepRelativeImageUris>true</keepRelativeImageUris>
							<paperType>A4</paperType>
							<profileOs>linux</profileOs>
							<targetDirectory>${basedir}/target/docbkx/pdf/linux</targetDirectory>
						</configuration>
					</execution>
				</executions>
				<configuration>
					<foCustomization>${basedir}/src/docbkx/stylesheets/docbkx_rce_pdf.xsl</foCustomization>
					<!-- activate xInclude, which is a better approach than including sections 
						via XML entities - misc_ro -->
					<xincludeSupported>true</xincludeSupported>
					<entities>
						<!-- Transfer the build id into DocBook as an entity, as accessing 
							it as a Maven property does not seem to work when exporting from Ant. Another 
							option might be to insert it via XSLT to avoid undefined entity warnings 
							in editors. - misc_ro -->
						<entity>
							<name>buildId</name>
							<value>${antGenerated.buildId}</value>
						</entity>
					</entities>
				</configuration>
			</plugin>
		</plugins>
	</build>

</project>