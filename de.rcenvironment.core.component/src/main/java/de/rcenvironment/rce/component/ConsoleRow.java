/*
 * Copyright (C) 2006-2010 DLR, Germany
 * 
 * All rights reserved
 * 
 * http://www.rcenvironment.de/
 */

package de.rcenvironment.rce.component;

import java.io.Serializable;
import java.text.SimpleDateFormat;
import java.util.Date;

import de.rcenvironment.commons.ComparatorUtils;

/**
 * Representation of a single console output row.
 * 
 * @author Doreen Seider
 * @author Robert Mischke
 */
public class ConsoleRow implements Serializable, Comparable<ConsoleRow>, Cloneable {

    /** Suffix used for publishing console notifications. */
    public static final String NOTIFICATION_SUFFIX = ":rce.component.console";

    private static final long serialVersionUID = 5725183929182175975L;

    /** Type of the row: stdout or stderr. */
    public enum Type {
        /** Stdout. */
        STDOUT,

        /** Stderr. */
        STDERR,

        /**
         * Message lines that are not part of Stdout or Stderr, for example progress or status
         * messages generated by wrappers or components.
         */
        META_INFO;
    }

    private final String workflow;

    private final String component;

    private final Type type;

    private final String text;

    // not final to allow testing
    private long timestamp;

    private long number;

    public ConsoleRow(String aWorkflow, String aComponent, Type aType, String aText) {
        this(new Date().getTime(), aWorkflow, aComponent, aType, aText); // current local time stamp
    }

    private ConsoleRow(long aTimestamp, String aWorkflow, String aComponent, Type aType, String aText) {
        timestamp = aTimestamp;
        workflow = aWorkflow;
        component = aComponent;
        type = aType;
        // cleanup step 1: replace all sequences of "special" characters with single spaces
        aText = aText.replaceAll("[\\n\\r\\f\\a\\e\\x00]+", " ");
        // cleanup step 2: replace tabs with a fixed number of spaces (4 for now)
        aText = aText.replaceAll("\\t", "    ");
        text = aText;
    }

    public long getTimestamp() {
        return timestamp;
    }

    public String getWorkflow() {
        return workflow;
    }

    public String getComponent() {
        return component;
    }

    public Type getType() {
        return type;
    }

    public String getText() {
        return text;
    }

    public void setNumber(long number) {
        this.number = number;
    }

    public long getNumber() {
        return number;
    }

    @Override
    public int compareTo(ConsoleRow o) {
        final int equal = 0;

        int compareResult = ComparatorUtils.compareLong(timestamp, o.getTimestamp());
        if (compareResult == equal) {
            compareResult = workflow.compareTo(o.getWorkflow());
            if (compareResult == equal) {
                compareResult = component.compareTo(o.getComponent());
                if (compareResult == equal) {
                    compareResult = ComparatorUtils.compareLong(number, o.getNumber());
                    if (compareResult == equal) {
                        compareResult = text.compareTo(o.getText());
                    }
                }
            }
        }

        return compareResult;
    }

    @Override
    public String toString() {
        SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd - HH:mm:ss,SSS");
        return df.format(timestamp) + " " + type.toString() + "(" + number + ")" + " - " + text + "(" + component + "@" + workflow + ")";

    }

    @Override
    public int hashCode() {
        return toString().hashCode();
    }

    @Override
    public boolean equals(Object o) {

        if (o instanceof ConsoleRow) {
            ConsoleRow row = (ConsoleRow) o;
            if (timestamp == row.getTimestamp()
                && text.equals(row.getText())
                && number == row.getNumber()
                && component.equals(row.getComponent())
                && workflow.equals(row.getWorkflow())
                && type == row.getType()) {
                return true;
            }
        }
        return false;

    }

    @Override
    public ConsoleRow clone() {
        ConsoleRow row = new ConsoleRow(timestamp, workflow, component, type, text);
        row.setNumber(number);
        return row;
    }

    /**
     * Setter for unit tests.
     */
    protected void setTimestamp(long timestamp) {
        this.timestamp = timestamp;
    }

}
