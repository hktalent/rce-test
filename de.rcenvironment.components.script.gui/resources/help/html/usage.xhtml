<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN"
                      "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
    <head><title>Script Component Usage</title></head>
    <body>
        <h2><span 
                style="mso-fareast-font-family:&#34;Times New Roman&#34;; mso-ansi-language:EN-US"
                >Script Component Usage</span></h2>
        <h3><span 
                style="mso-fareast-font-family:&#34;Times New Roman&#34;; mso-ansi-language:EN-US"
                >Synopsis</span></h3>
        <p><span  style="mso-ansi-language:EN-US">The Script component allows the
                execution of a self-written script. Currently, two script languages are
                    supported:</span></p>
        <p><span  style="mso-ansi-language:EN-US">Python: must be installed on the
                executing system</span></p>
        <p><span style="mso-fareast-font-family:&#34;Times New Roman&#34;"><a
                    href="http://jython.org" shape="rect"><span 
                        style="mso-ansi-language:EN-US">Jython</span></a></span><span 
                style="mso-ansi-language:EN-US">: a Java implementation of Python.</span></p>
        <h3><span 
                style="mso-fareast-font-family:&#34;Times New Roman&#34;; mso-ansi-language:EN-US"
                    >Rationale</span></h3>
        <p><span  style="mso-ansi-language:EN-US">Based on the selection, the component
                uses a natively installed Python version or the Java implementation Jython. This
                approach was selected on purpose because many users use their own specific modules
                and want to use Python for this, others are satisfied with the standard Python
                operations and need a faster implementation which is Jython.</span></p>
        <p><span 
                style="mso-fareast-font-family:&#34;Times New Roman&#34;; mso-ansi-language:EN-US"
                    >Limitations:</span></p>
        <p class="MsoNormal" style="mso-margin-top-alt:auto;mso-margin-bottom-alt:auto"><span
                
                style="mso-fareast-font-family:&#34;Times New Roman&#34;;mso-ansi-language: EN-US"
                >Only single file scripts are allowed, because the user's script contents are
                converted into a temporary "wrapped" script, executed in the executor’s temporary
                directory. It's currently not possible to copy satellite files like modules or input
                data files to the directory, where the script is residing.</span></p>
        <p class="MsoNormal" style="mso-margin-top-alt:auto;mso-margin-bottom-alt:auto"><span
                
                style="mso-fareast-font-family:&#34;Times New Roman&#34;;mso-ansi-language: EN-US">
               
            </span></p>
        <p class="MsoNormal" style="mso-margin-top-alt:auto;mso-margin-bottom-alt:auto"><span
                
                style="mso-fareast-font-family:&#34;Times New Roman&#34;;mso-ansi-language: EN-US"
                >The execution speed of the Python implementation is limited by the initial start-up
                time of the Python interpreter (or virtual machine, just-in-time compiler). Each
                script execution first wraps the user script into a temporary script file, then
                starts the Python executable in a new process and after that, processes the output
                    bindings.</span></p>
        <p class="MsoNormal" style="mso-margin-top-alt:auto;mso-margin-bottom-alt:auto"><span
                
                style="mso-fareast-font-family:&#34;Times New Roman&#34;;mso-ansi-language: EN-US">
                
            </span></p>
        <p class="MsoNormal" style="mso-margin-top-alt:auto;mso-margin-bottom-alt:auto"><span
                
                style="mso-fareast-font-family:&#34;Times New Roman&#34;;mso-ansi-language: EN-US"
                >Advantages of native Python:
                </span></p>
        <p class="MsoNormal" style="mso-margin-top-alt:auto;mso-margin-bottom-alt:auto"><span
                
                style="mso-fareast-font-family:&#34;Times New Roman&#34;;mso-ansi-language: EN-US">
                
            </span></p>
        <p class="MsoListParagraphCxSpFirst"
            style="mso-margin-top-alt:auto;mso-margin-bottom-alt: auto;margin-left:18.0pt;mso-add-space:auto;text-indent:-18.0pt;mso-list:l0 level1 lfo1"
                ><span style="mso-fareast-font-family:&#34;Times New Roman&#34;"><span
                    style="mso-list:Ignore">-<span style="font:7.0pt &#34;Times New Roman&#34;"
                        >          </span></span></span><span
                style="mso-fareast-font-family:&#34;Times New Roman&#34;">100% binary
                    compatibility
                </span></p>
        <p class="MsoListParagraphCxSpMiddle"
            style="mso-margin-top-alt:auto;mso-margin-bottom-alt: auto;margin-left:18.0pt;mso-add-space:auto;text-indent:-18.0pt;mso-list:l0 level1 lfo1"
                ><span 
                style="mso-fareast-font-family:&#34;Times New Roman&#34;;mso-ansi-language: EN-US"
                    ><span style="mso-list:Ignore">-<span
                        style="font:7.0pt &#34;Times New Roman&#34;">         
                </span></span></span><span 
                style="mso-fareast-font-family: &#34;Times New Roman&#34;;mso-ansi-language:EN-US"
                >Exotic setups are supported automatically, including third-party modules, binary
                libraries, </span><tt><span 
                    style="font-size:10.0pt;mso-ansi-language:EN-US">cpython</span></tt><span
                
                style="mso-fareast-font-family:&#34;Times New Roman&#34;;mso-ansi-language: EN-US">
                and so on. Users gain the benefit of using additionally installed Python modules
                like </span><tt><span  style="font-size:10.0pt; mso-ansi-language:EN-US"
                    >&lt;&lt;numpy&gt;&gt;, &lt;&lt;scipy&gt;&gt;</span></tt><span 
                style="mso-fareast-font-family:&#34;Times New Roman&#34;;mso-ansi-language: EN-US">
                or </span><tt><span  style="font-size:10.0pt;mso-ansi-language: EN-US"
                    >&lt;&lt;mysqldb&gt;&gt;</span></tt></p>
        <p class="MsoListParagraphCxSpMiddle"
            style="mso-margin-top-alt:auto;mso-margin-bottom-alt: auto;margin-left:18.0pt;mso-add-space:auto;text-indent:-18.0pt;mso-list:l0 level1 lfo1"
                ><span 
                style="mso-fareast-font-family:&#34;Times New Roman&#34;;mso-ansi-language: EN-US"
                    ><span style="mso-list:Ignore">-<span
                        style="font:7.0pt &#34;Times New Roman&#34;">         
                </span></span></span><span 
                style="mso-fareast-font-family: &#34;Times New Roman&#34;;mso-ansi-language:EN-US"
                >Self-compiled Python interpreters with binary extensions can be used</span></p>
        <p class="MsoListParagraphCxSpLast"
            style="mso-margin-top-alt:auto;mso-margin-bottom-alt: auto;margin-left:18.0pt;mso-add-space:auto;text-indent:-18.0pt;mso-list:l0 level1 lfo1"
                ><span 
                style="mso-fareast-font-family:&#34;Times New Roman&#34;;mso-ansi-language: EN-US"
                    ><span style="mso-list:Ignore">-<span
                        style="font:7.0pt &#34;Times New Roman&#34;">         
                </span></span></span><span 
                style="mso-fareast-font-family: &#34;Times New Roman&#34;;mso-ansi-language:EN-US"
                >No problems with library indexing as e.g. in Jython</span></p>
        <h3><span 
                style="mso-fareast-font-family:&#34;Times New Roman&#34;; mso-ansi-language:EN-US"
                    >Usage</span></h3>
        <p class="MsoNormal" style="mso-margin-top-alt:auto;mso-margin-bottom-alt:auto"><span
                
                style="mso-fareast-font-family:&#34;Times New Roman&#34;;mso-ansi-language: EN-US"
                >Define your inputs and outputs in the </span><tt><span 
                    style="font-size:10.0pt;mso-ansi-language:EN-US">Inputs/Outputs</span></tt><span
                
                style="mso-fareast-font-family:&#34;Times New Roman&#34;;mso-ansi-language: EN-US">
                tab of the Properties view (appearing for the selected Script component on double
                    click).</span></p>
        <p class="MsoNormal" style="mso-margin-top-alt:auto;mso-margin-bottom-alt:auto"><span
                
                style="mso-fareast-font-family:&#34;Times New Roman&#34;;mso-ansi-language: EN-US"
                >Write your script in the </span><span 
                style="font-size:10.0pt; font-family:&#34;Courier New&#34;;mso-fareast-font-family:&#34;Times New Roman&#34;;mso-ansi-language: EN-US"
                >Script </span><span 
                style="mso-fareast-font-family:&#34;Times New Roman&#34;; mso-ansi-language:EN-US"
                >tab (in the same Properties view). You can either do it in the text box or in a
                separate text editor by clicking on the button “Open in Editor”.</span></p>
        <p class="MsoNormal" style="mso-margin-top-alt:auto;mso-margin-bottom-alt:auto"><span
                style="mso-fareast-font-family:&#34;Times New Roman&#34;;mso-ansi-language: EN-US"
                >For interacting with RCE from a script, there is a module called "RCE". </span></p>
        <p class="MsoNormal" style="mso-margin-top-alt:auto;mso-margin-bottom-alt:auto">To get an
            overview of all RCE API methods, look at <a href="RCE_Script_API.xhtml">the script API
                detailed description</a></p>
        <p class="MsoNormal" style="mso-margin-top-alt:auto;mso-margin-bottom-alt:auto"><span
                style="mso-fareast-font-family:&#34;Times New Roman&#34;;mso-ansi-language: EN-US"
                >The most important methods there are reading inputs and writing outputs. For
                reading an input, call the method</span></p>
        <p class="MsoNormal" style="mso-margin-top-alt:auto;mso-margin-bottom-alt:auto"><span
                
                style="mso-fareast-font-family:&#34;Times New Roman&#34;;mso-ansi-language: EN-US">
                
            </span></p>
        <p class="MsoNormal" style="mso-margin-top-alt:auto;mso-margin-bottom-alt:auto"><span
                
                style="font-size:10.0pt;font-family:&#34;Courier New&#34;;mso-ansi-language: EN-US"
                >RCE.read_input(String input_name)</span></p>
        <p class="MsoNormal" style="mso-margin-top-alt:auto;mso-margin-bottom-alt:auto"><span
                
                style="mso-fareast-font-family:&#34;Times New Roman&#34;;mso-ansi-language: EN-US">
                
            </span></p>
        <p class="MsoNormal" style="mso-margin-top-alt:auto;mso-margin-bottom-alt:auto"><span
                
                style="mso-fareast-font-family:&#34;Times New Roman&#34;;mso-ansi-language: EN-US"
                >You can write outputs within your script with</span></p>
        <p class="MsoNormal" style="mso-margin-top-alt:auto;mso-margin-bottom-alt:auto"><span
                
                style="font-size:10.0pt;font-family:&#34;Courier New&#34;;mso-ansi-language: EN-US">
                
            </span></p>
        <p class="MsoNormal" style="mso-margin-top-alt:auto;mso-margin-bottom-alt:auto"><span
                
                style="font-size:10.0pt;font-family:&#34;Courier New&#34;;mso-ansi-language: EN-US"
                >RCE.write_output(String output_name, OutputDataType value)</span></p>
        <p><span  style="mso-ansi-language:EN-US">Thereby, the </span><span 
                style="mso-fareast-font-family:&#34;Times New Roman&#34;;mso-ansi-language: EN-US"
                >type (</span><span 
                style="font-size:10.0pt;font-family:&#34;Courier New&#34;; mso-ansi-language:EN-US"
                >OutputDataType</span><span 
                style="mso-fareast-font-family:&#34;Times New Roman&#34;;mso-ansi-language:EN-US">)
                of the value must fit the data type of the output (as defined in the tab
                    </span><tt><span  style="font-size:10.0pt;mso-ansi-language:EN-US"
                    >Inputs/Outputs)</span></tt><span 
                style="mso-fareast-font-family:&#34;Times New Roman&#34;;mso-ansi-language: EN-US">.
                File and Directory are represented by the absolute file paths.</span></p>
        <p class="MsoNormal" style="mso-margin-top-alt:auto;mso-margin-bottom-alt:auto"><span
                 style="mso-ansi-language:EN-US">(The module RCE used is already
                imported in the script during execution.)</span></p>
        <p style="margin-left:36.0pt"><span  style="mso-ansi-language:EN-US"
                    >Examples:</span></p>
        <p style="margin-left:36.0pt"><span  style="mso-ansi-language:EN-US">If you like
                to double an incoming value (x is an input of type Integer and y an output of type
                    Integer):
            </span></p>
        <p><span  style="font-size:10.0pt;mso-ansi-language:EN-US"><span
                    style="mso-tab-count:1">                </span></span><span 
                style="font-size:10.0pt;font-family:&#34;Courier New&#34;;mso-ansi-language:EN-US"
                >RCE.write_output("y", RCE.read_input(2 * x))</span></p>
        <p style="margin-left:36.0pt"><span  style="mso-ansi-language:EN-US">If you like
                to access an incoming file (f_in is an input of type File):</span></p>
        <p style="margin-left:36.0pt"><span 
                style="font-size:10.0pt; font-family:&#34;Courier New&#34;;mso-ansi-language:EN-US"
                >file = open(RCE.read_input("f_in"),"r")</span></p>
        <p style="margin-left:36.0pt"><span  style="mso-ansi-language:EN-US">If you like
                to send a file to an output (f_out is an output of type File):</span></p>
        <p style="margin-left:36.0pt"><span 
                style="font-size:10.0pt; font-family:&#34;Courier New&#34;;mso-ansi-language:EN-US"
                >absolute_file_path = /home/user_1/my_file.txt</span></p>
        <p style="margin-left:36.0pt"><span 
                style="font-size:10.0pt; font-family:&#34;Courier New&#34;;mso-ansi-language:EN-US"
                >RCE.write_output("f_out", absolute_file_path),</span></p>
        <h3><span 
                style="font-size:12.0pt;mso-fareast-font-family:&#34;Times New Roman&#34;; mso-ansi-language:EN-US;font-weight:normal;mso-bidi-font-weight:bold">
                
            </span></h3>
         <p style="margin-left:36.0pt"><span  style="mso-ansi-language:EN-US">
            If an output is not needed any more (e.g. you want to end an inner loop), you can
                close an output using the command:</span></p>
        <h3><span 
                style="font-size:12.0pt;mso-fareast-font-family:&#34;Times New Roman&#34;; mso-ansi-language:EN-US;font-weight:normal;mso-bidi-font-weight:bold"
                    ><span style="mso-tab-count:1">            </span></span><span 
                style="font-size:10.0pt;font-family:&#34;Courier New&#34;;mso-ansi-language:EN-US; font-weight:normal;mso-bidi-font-weight:bold"
                >RCE.close_output(String output_name)</span></h3>
        <h3><span 
                style="font-size:10.0pt;font-family:&#34;Courier New&#34;; mso-ansi-language:EN-US;font-weight:normal;mso-bidi-font-weight:bold"
                    ><span style="mso-tab-count:1">      </span></span><span 
                style="font-size: 12.0pt;mso-ansi-language:EN-US;font-weight:normal;mso-bidi-font-weight:bold"
                    >Example:
            </span></h3>
        <h3><span 
                style="font-size:10.0pt;font-family:&#34;Courier New&#34;; mso-ansi-language:EN-US;font-weight:normal;mso-bidi-font-weight:bold"
                    ><span style="mso-tab-count:1">      </span>RCE.close_output(“y”)</span></h3>
        <p style="margin-left:36.0pt"><span  style="mso-ansi-language:EN-US">The following components will get the finished signal.</span></p>
            <p style="margin-left:36.0pt"><span  style="mso-ansi-language:EN-US">If a script fails because of some invalid parameters sent by a Parametric Study or Optimizer component, you can send a "not a value" signal to your output(s). It indicates, that the script failed because of invalid parameters and did not fail at all. This signal is ignored by most of the components, only the Parametric
                Study and the Optimizer component handle this signal. For sending it, use
            </span></p>
        <h3><span 
            style="font-size:12.0pt;mso-fareast-font-family:&#34;Times New Roman&#34;; mso-ansi-language:EN-US;font-weight:normal;mso-bidi-font-weight:bold"
            ><span style="mso-tab-count:1">            </span></span><span 
                style="font-size:10.0pt;font-family:&#34;Courier New&#34;;mso-ansi-language:EN-US; font-weight:normal;mso-bidi-font-weight:bold"
                >RCE.write_not_a_value_output(String outputname)</span></h3>
        <h3><span
                style="font-size:12.0pt;mso-fareast-font-family:&#34;Times New Roman&#34;; mso-ansi-language:EN-US;font-weight:normal;mso-bidi-font-weight:bold"
                >For the other API methods refer to the example workflow "Script_with_all_API_methods.wf" from the workflow examples project. </span></h3>
        <h3>Script component states</h3>
       <p>The Script component can keep its state from one run to another. Use the API to write and read
            state variables. The values are stored in a Python dictionary. They must be compatible with the RCE data types. Script components of nested loops are resetted if the nested loop has been terminated. Resetting a script component in a nested loop also resets its state map.</p>
        <h3>Python Executable</h3>
        <p><span>If Python was chosen as script language, the path to the Python executable must be
                chosen before as workflow start (in the second page of the workflow execution
                dialog). It must be done for every Script component of the workflow. If they all
                should use the same Python interpreter, the “Apply to all” button helps.</span></p>
    </body>
</html>