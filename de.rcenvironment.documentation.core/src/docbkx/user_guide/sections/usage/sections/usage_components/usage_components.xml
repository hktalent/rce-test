<!DOCTYPE sect1 PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN" "http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">
<sect1 id="usage_components">
	<title>Workflow Components</title>
	<para>Documentation regarding workflow components is integrated in RCE (as so called dynamic help).
		It can be found by pressing the F1 key, which opens the dynamic help view. After that,
		select the workflow component in the workflow editor you would like to get help for. The
		view will display the help content of that particalur workflow component. You can navigate
		through the contents by clicking the links and by using backwards and forwards. </para>

	<sect2>
		<title>Execution Scheduling of Workflow Components</title>
		<para>The execution of workflows is data-driven. As soon as all of the desired input data is
			available, a component will be executed. Which input data is desired, is defined by the
			component developer (in case of native RCE workflow components), the tool integrator,
			and/or the workflow creator. The component developer and tool integrator decide which
			options are allowed for a particular component. The workflow creator can choose between
			these options at workflow design time. The following options exist: </para>
		<para>Input handling</para>
			<itemizedlist>
				<listitem>
					<para>
					<emphasis role="italic">Constant:</emphasis> The value won't be consumed during
					execution and will be reused in the next iteration (if there is any loop in the
					workflow). The workflow will fail if there is more than value received, except
					for nested loops: All inputs of type <emphasis role="italic">Constant</emphasis>
					are resetted within nested loops, after the nested loop has been
					terminated.</para>
				</listitem>
				<listitem>
					<para>
					<emphasis role="italic">Single (Consumed):</emphasis> The input value will be
					consumed during execution and won't be reused in the next iteration (if there is
					any loop in the workflow). Queuing of input values is not allowed. If another
					value is received before the current one was consumed, the workflow will fail.
					This can guard against workflow design errors. E.g., an optimizer must not
					receive more than one value at one single input within one iteration.</para>
				</listitem>
				<listitem>
					<para>
					<emphasis role="italic">Queue (Consumed):</emphasis> The input value will be
					consumed during execution and won't be reused in the next iteration (if there is
					any loop in the workflow). Queuing of input values is allowed.</para>
				</listitem>
			</itemizedlist>
			<para>Execution constraint</para>
			<itemizedlist>
				<listitem>
					<para>
					<emphasis role="italic">Required:</emphasis> The input value is required for
					execution. Thus, the input must be connected to an output.</para>
				</listitem>
				<listitem>
					<para>
					<emphasis role="italic">Required if connected:</emphasis> The input value is not
					required for execution (e.g., if a default value will be used as fall back
					within the component). Thus, the input doesn't need to be connected to an
					output. But if it is connected to an output, it will be handled as an input of
					type <emphasis role="italic">Required</emphasis>.</para>
				</listitem>
				<listitem>
					<para>
					<emphasis role="italic">Not required:</emphasis> The input value is not required
					for execution. Thus, the input doesn't need to be connected to an output. If it
					is connected to an output, the input value will be passed to the component if
					there is a value available at the time of execution. Values at inputs of type
						<emphasis role="italic">Not required</emphasis> cannot trigger component
					execution except if it is the only input defined for a component. Note: With
					this option, non-deterministic workflows can be easily created. Use this option
					carefully. If in doubt, leave it out.</para>
				</listitem>
			</itemizedlist>
			<para>Note: With RCE 6.0.0 the scheduling options changed. Below is the migration path: </para>
			<itemizedlist>
				<listitem>
					<para>
					<emphasis role="italic">Initial</emphasis> was migrated to <emphasis
						role="italic">Constant</emphasis> and <emphasis role="italic"
						>Required</emphasis>.</para>
				</listitem>
				<listitem>
					<para>
					<emphasis role="italic">Required</emphasis> was migrated to <emphasis
						role="italic">Single (Consumed)</emphasis> and <emphasis role="italic"
						>Required</emphasis>.</para>
				</listitem>
				<listitem>
					<para>
					<emphasis role="italic">Optional</emphasis> was migrated to <emphasis
						role="italic">Single (Consumed)</emphasis> and <emphasis role="italic"
						>Required if connected</emphasis>.</para>
				</listitem>
			</itemizedlist>
			<para>If you encounter any problems with workflows created before RCE 6.0.0, it is likely, that
			it affects the migration to <emphasis role="italic">Single (Consumed)</emphasis> instead
			of to <emphasis role="italic">Queue (Consumed)</emphasis>. We decided to migrate
			conservatively to not hide any existing workflow design errors. So, if queuing of input
			values is allowed for an input, just change the input handling option to <emphasis
				role="italic">Queue (Consumed)</emphasis> after the workflow was updated. Another
			issue can affect the migration of <emphasis role="italic">Optional</emphasis>. If it
			affects an input of the script component, check the option, which let the script
			component execute on each new value at any of its inputs. Also check <emphasis
				role="italic">Not required</emphasis> as an alternative execution constraint
			option.</para>
	</sect2>
</sect1>
